/*	utilsEntity.js	A commonJS module handling a current Entity		Usage:		var modEntity = require('utilsEntity');		. . . modEntity contains the APIs . . .		Public APIs available:		save(inEntity)			Call save() inside a try...catch block			Returns {withErr: false} if no error was catched, else {withErr: true, moreErr: anObject}			with anObject: the error object returned by Wakanda server.						Actually, this utility is just a wrapper for try{ save() } catch...			*/// ==================================================/** save()**	@method save*	@param inEntity {object}, the entity to save*	@return {object}**	Returns {errNum: 0} if no error was catched, else {errNum: value, moreErr: anObject}*			with anObject: the error object returned by Wakanda server.**	Example:*		var modEntity = require('utilsEntity');*		var e;*		var result;**		e = new ds.TheClass({...fill values...});*		result = modEntity.save(e);*		if(result.withErr) {*			. . . do something*			. . . details are in result.moreErr*		}***/exports.save = function(inEntity) {	try {		inEntity.save();	} catch(err) {		return {withErr : true, moreErr: err};	}		return {withErr : false};}//--EOF--