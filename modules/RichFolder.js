/*	RichFolder.js	A CommonJS (http://www.commonjs.org/) encapsulating a Folder object		(c) 4D SAS, author: Thibaud Arguillere	License: MIT. See the license at the end of this source code		Version		1.0.1, 2012-07-17			Bug fix in constructor		1.0, 2012-07-14		Usage:		var RichFolder = require('RichFolder').RichFolder;		. . . RichFolder contains the APIs . . .				var rf = new RichFolder( ds.getModelFolder().path + "myFolder" );				--------------------------------------	Constructor:	--------------------------------------	Same as Folder:		new RichFolder(fullPath);			Specific:		new RichFolder(aFolder);		new RichFolder(aRichFolder);		Constructor can throw an error if the parameter is invalid		--------------------------------------	Properties:	--------------------------------------	Same as Folder:		path			readonly		exists			read only		--------------------------------------	Class method:	--------------------------------------	getFolder(inFolderOrPath, inWantRichFolder)		For generic coding, receives a Folder, a RichFolder or a string, returns a Folder or a RichFolder		--------------------------------------	Properties:	--------------------------------------		--------------------------------------	Instance methods	--------------------------------------	toString()		Wa wrapper for the path paroprty		countFiles(inCallback)		Returns in outResult.count the total count of files in the folder, including.		subfolders. If inCallback is passed, it receives each file as parameter and must		return truly if the file must be added to the count, else it must return falsy.		This callback is useful for example when you want to count only certain		kind of files, depending on their extension (just the ".jpg" for example)		and/or on their properties (invisible, modification date, ...)		If no callback is provided, the routine counts every file.		Example:			// Count only visible files in the WebFolder			var result = {};						function cb_justVisible(inFile) {				return inFile.visible ? true : false;			}			var RichFolder = require('RichFolder').RichFolder;			var myRichFolder = new RichFolder("here the path");			var count = myRichFolder.countFiles(cb_justVisible);			// count contains the count of visible files		getFiles(inCallback, inGetRichFile)		Returns an array of File, built by looping in the folder		recursively, adding a file if the callback returns true.		If inGetRichFile is true, we return an array of RichFile.		Example:			// Get all .css files in the WebFolder			var cssFiles = [];						function cb_checkCss(inFile) {				return inFile.extension === 'css';			}			var RichFolder = require('RichFolder').RichFolder;			var myRichFolder = new RichFolder( ds.getModelFolder().path + "WebFolder" );			var cssFiles = myRichFolder.getFiles(cb_checkCss);			// continue with the cssFiles array*/(function scope_RichFolder() {		// The parameter can be a string( path), a Folder or a RichFolder	function _RichFolder(inP1) {		var _folder;				if(inP1 instanceof Folder) {	// f = new RichFolder( ds.getModelFolder() );			_folder = Folder(inP1.path);		} else if(inP1 instanceof _RichFolder) {	// f = new RichFolder( anotherRichFolder );			_folder = inP1.getNativeFolder(true);		} else {								// f = new RichFolder( folderPathAsString );			_folder = Folder(inP1);		}			//--------------------------------------		// Override and mimic some Folder properties often used, to avoid		// calling getNativeFile() everytime		//--------------------------------------		this.__defineGetter__('path', function() { return _folder.path });		this.__defineSetter__('path', function(inValue) { throw new TypeError(); });		this.__defineGetter__('exists', function() { return _folder.exists });		this.__defineSetter__('exists', function(inValue) { throw new TypeError(); });		//--------------------------------------		//Instance methods		//--------------------------------------		this.toString = function() {			return _folder.path;		};				// Easy access to File functions.		this.getNativeFolder = function(inClone) {			if(inClone) {				return Folder(_folder.path);			} else {				return _folder;			}		};				this.countFiles = function(inCallback) {			var result = {};						// The main function, using an object as parameter to cumulate values			function _countFiles(inFolder, inCB, outResult) {								if(typeof outResult ===  'object') {					if(!('count' in outResult)) { // main call						outResult.count = 0;					}										if(inFolder instanceof Folder) {						if(typeof inCB === 'function') {							inFolder.forEachFile( function(inSubFile) {								var cbResult = inCB(inSubFile);								if(cbResult) {									outResult.count += 1;								}							});							inFolder.forEachFolder( function(inSubFolder) {								_countFiles(inSubFolder, inCB, outResult);							});						} else {							outResult.count += inFolder.files.length;							inFolder.forEachFolder( function(inSubFolder) {								_countFiles(inSubFolder, null, outResult);							});						}					}				}			}						_countFiles(_folder, typeof inCallback === 'function' ? inCallback : null, result);			return result.count;		};				this.getFiles = function(inCallback, inGetRichFile) {			var result = [];			var RichFile;						inGetRichFile = inGetRichFile ? true : false;			if(inGetRichFile) {				RichFile = require('RichFile').RichFile			}						function _getFiles(inFolder, inCB, outFiles) {				// outFiles must be a valid array				if(Object.prototype.toString.call(outFiles) === '[object Array]') {										if(inFolder instanceof Folder && typeof inCB === 'function') {						inFolder.forEachFile( function(inSubFile) {							if(inCB(inSubFile)) {								if(inGetRichFile) {									outFiles.push( new RichFile(inSubFile) );								} else {									outFiles.push(inSubFile);								}							}						});												inFolder.forEachFolder( function(inSubFolder) {							_getFiles(inSubFolder, inCB, outFiles);						});					}				}			}						_getFiles(_folder, typeof inCallback === 'function' ? inCallback : null, result);			return result;		};		}		//--------------------------------------	// Class methods	//--------------------------------------	_RichFolder.getFolder = function(inFolderOrPath, inWantRichFolder) {		var result = null;				inWantRichFolder = inWantRichFolder ? true : false;				if(inFolderOrPath instanceof Folder) {						if(inWantRichFolder) {				result = new _RichFolder(inFolderOrPath);			} else {				result = inFolderOrPath;			}					} else if(inFolderOrPath instanceof _RichFolder) {						if(inWantRichFolder) {				result = inFolderOrPath;			} else {				result = inFolderOrPath.getNativeFolder();			}					} else if (typeof inFolderOrPath === 'string' && inFolderOrPath !== '') {			if(inWantRichFolder) {				result = new _RichFolder(inFolderOrPath);			} else {				result = Folder(inFolderOrPath);			}		}			return result;			};		//--------------------------------------	// Give the object to the CommonJS module	//--------------------------------------	exports.RichFolder = _RichFolder;	}());/*	License: MIT (http://www.opensource.org/licenses/MIT)	Permission is hereby granted, free of charge, to any person	obtaining a copy of this software and associated documentation	files (the "Software"), to deal in the Software without	restriction, including without limitation the rights to use,	copy, modify, merge, publish, distribute, sublicense, and/or sell	copies of the Software, and to permit persons to whom the	Software is furnished to do so, subject to the following	conditions:		The above copyright notice and this permission notice shall be	included in all copies or substantial portions of the Software.		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR	OTHER DEALINGS IN THE SOFTWARE.*/// --EOF