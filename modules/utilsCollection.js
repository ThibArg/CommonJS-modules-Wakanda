/*	utilsCollection.js	A commonJS module handling an EntityCollection		(c) 4D SAS, author: Thibaud Arguillere	License: MIT. See the license at the end of this source code		Version		1.0, 2012-07-14		Usage:		var modCollection = require('utilsCollection');		. . . modCollection contains the APIs . . .		Public APIs available:		reduce(inColl, inHowMabny)			Return a collection containing only the inHowMany first entities					some(inColl, inCB)			(The same as Array.some() with an EntityCollection)			Returns true if inCB returned true for at least one entity			*//**	_isWakEntityCollection**	For internal usage.*	As of today (May, 2012), instanceof does not work with entities and entitycollections*	This utility states that the parameter is an EntityCollection if it contains some*	(probably specific) properties.**/function _isWakEntityCollection(inColl) {		return inColl && "length" in inColl && "query" in inColl;}exports.reduce = function(inColl, inHowMany) {	var newColl, i;		inHowMany = typeof inHowMany === 'number' ? inHowMany : inColl.length;		// Create an empty collection	newColl = inColl.getDataClass().createEntityCollection();	if(inHowMany >= inColl.length) {		// Duplicate the original collection		newColl = newColl.or(inColl);			} else if(inHowMany > 0) {		for(i = 0; i < inHowMany; ++i) {			newColl.add(inColl[i]);		}	}		return newColl;}// ==================================================/** some() acts as Array.some()*	See MDN doc.: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some**	@method some*	@param inColl {object}, the collection to loop in*	@param inCB {function}, the callback to be called for every entity in inColl. It receives*							3 parameters: the current entity, the index and the collection.*	@return {boolean} true if the callback returned true for at least one entity**	@comment: before using this routine, look if it's not possible to call query() or*			  find(), because they'll be faster and easier to use. Also remind that*			  query() can execute JS (server side only, see the doc.)**	Example: here, we have a class that stores IP to be filterer. It can contains only*			 the beginning of the IP ("10.0" for example, to filter all IPs in 10.0.*)**		var modColl = require('utilsCollection');*		var ipToCheck = '10.0.0.1';*		result = modColl.some(ds.FilterIP.all(), function(inEntity) {*					return ipToCheck.indexOf(inEntity.ip) === 0;*				});***/exports.some = function(inColl, inCB) {	var result = false,		i, max;		if(!_isWakEntityCollection(inColl)) {		throw new TypeError(inColl)	} else if (typeof inCB !== 'function') {		throw new TypeError(inCB)	} else {		for(i = 0, max = inColl.length; i < max; ++i) {			if(inCB(inColl[i], i, inColl)) {				result = true;				break;			}		}	}		return result;}/*	License: MIT (http://www.opensource.org/licenses/MIT)	Permission is hereby granted, free of charge, to any person	obtaining a copy of this software and associated documentation	files (the "Software"), to deal in the Software without	restriction, including without limitation the rights to use,	copy, modify, merge, publish, distribute, sublicense, and/or sell	copies of the Software, and to permit persons to whom the	Software is furnished to do so, subject to the following	conditions:		The above copyright notice and this permission notice shall be	included in all copies or substantial portions of the Software.		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR	OTHER DEALINGS IN THE SOFTWARE.*/// --EOF