/*	YMD.js	A commonJS (http://www.commonjs.org/) module handling an date, storing just year, month and day		(c) 4D SAS, author: Thibaud Arguillere	License: MIT. See the license at the end of this source code		Version		1.1, 2012-07-27				Added toDate()		1.0, 2012-07-14		Dependencies:		The module uses RichDate module for addNNN() functions		=> RichDate.js ust be in the "modules" folder		IMPORTANT		The range of month is 1-12, not 0-11 as in Date		Usage:		var YMD = require('YMD').YMD		. . . YMD contains the APIs . . .		--------------------------------------	Constructor:	--------------------------------------		new YMD(inYear, inMonth, inDay); // Warning: here, inMonth range is 1-12, not 0-11		new YMD(inDate);		new YMD(inRichDate);		new YMD(YMD);		--------------------------------------	Properties:	--------------------------------------		year		month		day			These 3 properties are read only. To change the valuen, call set()		--------------------------------------	Instance methods	--------------------------------------	toString()		Return "YYYY-MM-DD"		toDate()		Return a Date object		addDays(inHowMany)		addMonths(inHowMany)		moveToFirstDayOfMonth()		moveToLastDayOfMonth()		getMonthName(inAbbr)		getISOWeekNumber()		equalsTo(inOther)		inOther can be a YMD, a Date or a RichDate		return true/false			compareTo(inOther)		inOther can be a YMD, a Date or a RichDate		returns 1 if inOther is lower, -1 if inOther is greater, 0 if they are the same*/(function scope_YMD() {	//--------------------------------------	//Constants (used internally	//--------------------------------------	// Starts at 1, as the m attribute of the YMD object	const _DAYS_IN_MONTHS = [-1, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];	const _MONTH_NAMES = ['', "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];	const _MONTH_NAMES_ABBR = ['', "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];		//--------------------------------------	// constructor and functions	//--------------------------------------	function _YMD(inP1, inM, inD) {		var RichDate = require('RichDate').RichDate;		var _y = null, _m = null, _d = null;		var typeOf;				function _update(inP1, inM, inD) {			var typeOf;						if(inP1 instanceof Date) {								_y = inP1.getFullYear();				_m = inP1.getMonth() + 1;				_d = inP1.getDate();							} else if(inP1 instanceof RichDate) {								_y = inP1.year;				_m = inP1.month + 1;				_d = inP1.date;							} else if(inP1 instanceof _YMD) {								_y = inP1.year;				_m = inP1.month;				_d = inP1.day; // Not date!							} else {								typeOf = typeof inP1;				if(typeOf === 'number') {					_y = inP1;				} else if(typeOf === 'string') {					_y = parseInt(inP1);				}								typeOf = typeof inM;				if(typeOf === 'number') {					_m = inM;				} else if(typeOf === 'string') {					_m = parseInt(inM);				}								typeOf = typeof inD;				if(typeOf === 'number') {					_d = inD;				} else if(typeOf === 'string') {					_d = parseInt(inD);				}								if(_y == null || _y < 0 || _m == null || (_m < 0 || _m > 12) || _d < 0 || _d > _DAYS_IN_MONTHS[_m]) {					throw "Invalid parameter for year, month or day";				} else if (_m === 2) {					if(RichDate.isLeapYear(_y)) {						if(d > 29) {							throw "Invalid day parameter";						}					} else if(_d > 28) {						throw "Invalid day parameter";					}				}			}		}				inP1 = inP1 || 0;		inM = inM || 0;		inD = inD || 0;		// Call the internal constructor to build the private variables		_update(inP1, inM, inD);				//--------------------------------------		// Properties		//--------------------------------------		this.__defineGetter__('year', function() { return _y; });		this.__defineSetter__('year', function(inValue) { throw new TypeError(); });		this.__defineGetter__('month', function() { return _m; });		this.__defineSetter__('month', function(inValue) { throw new TypeError(); });		this.__defineGetter__('day', function() { return _d; });		this.__defineSetter__('day', function(inValue) { throw new TypeError(); });				//--------------------------------------		//Instance methods		//--------------------------------------		this.toString = function() {			return '' + _y + "-" + (_m < 10 ? '0' + _m : _m) + "-" + (_d < 10 ? '0' + _d : _d);		}				this.toDate = function() {			return new Date(_y, _m - 1, _d);		}				this.addDays = function(inHowMany) {			var rd = new RichDate(_y, _m - 1, _d); // Need to minus 1 the month			rd.addDays(inHowMany);			_update(rd);			return this;		}				this.addMonths = function(inHowMany) {			var rd = new RichDate(_y, _m - 1, _d); // Need to minus 1 the month			rd.addMonths(inHowMany);			_update(rd);			return this;		}				this.moveToLastDayOfMonth = function() {			if(_m === 2) {				if(RichDate.isLeapYear(_y)) {					_d = 29;				} else {					_d = 28;				}			} else {				_d = _DAYS_IN_MONTHS[ _m ];			}			return this;		}				this.moveToFirstDayOfMonth = function() {			_d = 1;			return this;		}				this.getMonthName = function(inAbbr) {			if(inAbbr) {				return _MONTH_NAMES_ABBR[ _m ];			} else {				return _MONTH_NAMES[ _m ];			}		}				this.getISOWeekNumber = function() {			return RichDate.getISOWeekNumber(_y, _m, _d);		}				this.equalsTo = function(inOther) {			var otherYMD, result;						if(inOther instanceof _YMD) {				otherYMD = inOther;			} else {				otherYMD = new _YMD(inOther);			}						return (_d === otherYMD.day && _m === otherYMD.month && _d === otherYMD.day);		}				this.compareTo = function(inOther) {			var otherYMD, result;						if(inOther instanceof _YMD) {				otherYMD = inOther;			} else {				otherYMD = new _YMD(inOther);			}						if(_y > otherYMD.year) {				result = 1;			} else if(_y < otherYMD.year) {				result = -1;			} else {				if(_m > otherYMD.month) {					result = 1;				} else if(_m < otherYMD.month) {					result = -1;				} else {					if(_d > otherYMD.day) {						result = 1;					} else if(_d < otherYMD.day) {						result = -1;					} else {						result = 0;					}				}			}						return result;		}				this.update = function(inP1, inM, inD) {			_update(inP1, inM, inD);			return this;		}					} // function _YMD		//--------------------------------------	//Class methods	//--------------------------------------				//--------------------------------------	// Give the object to the CommonJS module	//--------------------------------------	exports.YMD = _YMD;	}());/*	License: MIT (http://www.opensource.org/licenses/MIT)	Permission is hereby granted, free of charge, to any person	obtaining a copy of this software and associated documentation	files (the "Software"), to deal in the Software without	restriction, including without limitation the rights to use,	copy, modify, merge, publish, distribute, sublicense, and/or sell	copies of the Software, and to permit persons to whom the	Software is furnished to do so, subject to the following	conditions:		The above copyright notice and this permission notice shall be	included in all copies or substantial portions of the Software.		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR	OTHER DEALINGS IN THE SOFTWARE.*/// --EOF